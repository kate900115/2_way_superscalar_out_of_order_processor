ucliGUI::start /home/tianmili/classes/eecs470/projects/project4/group7f15/two_threads/dve -ucligui +vc +define+ +memcbk
set ucliGUI::state
set ucliGUI::state
ucliCore::getToolPID
synopsys::env hasTB
trigger_hier_stack_context_switch 0
synUtils::setDVEInitPhase 1
synopsys::dump -type VPD -file /home/tianmili/classes/eecs470/projects/project4/group7f15/two_threads/inter.vpd -locking
synopsys::dump -autoflush on -fid VPD1
set ::dve_fid VPD1
synUtils::setDVEInitPhase 0
ucliCore::getToolPID
synUtils::sendTool -active _icl_setToolSocket /tmp/smlnpOT46xN
synUtils::sendTool -active {_icl_start_rpc -version "K-2015.09_Full64" -sync_file /tmp/vcs_dve_rpc.tianmili.300}
synUtils::sendTool -active {_icl_createSharedMemory /tmp/vcs_dve_general.tianmili.300}
config endofsim noexit
config onfail enable all
config syscaddplainmembers
config syscaddsourcenames
config syscaddstructtypes
synopsys::listing -disable
if { ![gui_sim_state -check active] } {error "Simulator did not start correctly" error}
#</Database>
# DVE Global setting session:
# Global: Breakpoints
# Global: Bus
# Global: Expressions
# Global: Signal Time Shift
# Global: Signal Compare
# Global: Signal Groups
synopsys::dump -add {testbench.processor_0.pc} -scope "." -depth 1 -fid VPD1
synopsys::dump -add {testbench.processor_0.prf1} -scope "." -depth 1 -fid VPD1
synopsys::dump -add {testbench.processor_0.pc.pc1} -scope "." -depth 1 -fid VPD1
synopsys::dump -add {testbench.processor_0.rob1} -scope "." -depth 1 -fid VPD1
synopsys::dump -add {testbench.processor_0.pc.pc2} -scope "." -depth 1 -fid VPD1
synopsys::dump -add {testbench.processor_0.cdb1} -scope "." -depth 1 -fid VPD1
synopsys::dump -add {testbench.processor_0} -scope "." -depth 1 -fid VPD1
set _session_group_5 Group1
set Group1 "$_session_group_5"
# Global: Highlighting
# Global: Stack
synopsys::xml {set_only_active_frame <data value="1" />}
# Post database loading setting...
# Restore C1 time
# Save global setting...
# Wave/List view global setting
# Close all empty TopLevel windows
foreach __top [gui_ekki_get_window_ids -type TopLevel] {     if { [llength [gui_ekki_get_window_ids -parent $__top]] == 0} {         gui_close_window -window $__top     } }
# DVE View/pane content session:
# Hier 'Hier.1'
catch {gui_list_expand -id ${Hier.1} testbench}
catch {gui_list_expand -id ${Hier.1} testbench.processor_0}
catch {gui_list_expand -id ${Hier.1} testbench.processor_0.prf1}
catch {gui_list_select -id ${Hier.1} {{testbench.processor_0.prf1.prf2[0]}}}
# Data 'Data.1'
catch { gui_list_select -id ${Data.1} {{testbench.processor_0.prf1.prf2[0].free_this_entry} }}
# Source 'Source.1'
# View 'Wave.1'
set groupExD [gui_get_pref_value -category Wave -key exclusiveSG]
set origWaveHeight [gui_get_pref_value -category Wave -key waveRowHeight]
set origGroupCreationState [gui_list_create_group_when_add -wave]
synopsys::dump -add {{testbench.processor_0.prf1.prf2[0].data_in} {testbench.processor_0.prf1.prf2[0].prf_in_use} {testbench.processor_0.prf1.prf2[0].value} {testbench.processor_0.prf1.prf2[0].value_next} {testbench.processor_0.prf1.prf2[0].write_prf_enable} } -aggregates  -fid VPD1
if {$origGroupCreationState} { 	gui_list_create_group_when_add -wave -enable }
if { $groupExD } {  gui_msg_report -code DVWW028 }
# Restore toplevel window zorder
# The toplevel window could be closed if it has no view/pane
if {[gui_exist_window -window ${TopLevel.1}]} { 	gui_set_active_window -window ${TopLevel.1} 	gui_set_active_window -window ${Source.1} 	gui_set_active_window -window ${DLPane.1} }
if {[gui_exist_window -window ${TopLevel.2}]} { 	gui_set_active_window -window ${TopLevel.2} 	gui_set_active_window -window ${Wave.1} }
#</Session>
synopsys::run
set ucliGUI::state
set ucliGUI::state
set ucliGUI::state
set ucliGUI::state
